+-----------------------+
			|         CS 124        |
			| PROJECT 2: BOOTLOADER |
			|    DESIGN DOCUMENT    |
			+-----------------------+

---- GROUP ----

ChingOS

>> Fill in the names and email addresses of your group members.

Andrew Zhao  azhao@caltech.edu
Kevin Yuh    kyuh@caltech.edu
Daniel Gu    dgu@caltech.edu

>> Specify how many late tokens you are using on this assignment:
0  

>> What is the Git repository and commit hash for your submission?
   (You only need to include the commit-hash in the file you submit
   on Moodle.)

   Repository URL:  
   commit ...

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

For the Makefile to work problems, the shell script assemble.sh in the assets
folder should run first, to properly make the assets needed for the game.

For extra credit, we implemented booting via Bochs, which can be done by
typing make run-bochs and then pressing the "c" key. We also implemented our
game with the graphical display mode.


>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course instructors.

			     PC BOOTER
			     =========

---- LOGISTICS ----

These questions will help us to keep track of the difficulty level of
assignments, as well as keeping track of which team members worked on
which parts.

>> L1: How many hours did each team member spend on this assignment?
   Make sure that each member's total time is listed.

Andrew: 10
Kevin:  8
Daniel  12

>> L2: What did each team member focus on for this assignment?  Keep
   descriptions to 25-30 words or less.

Andrew: wrote the bootloader, implemented interrupt handlers, implemented
        Bochs, made the assets, implemented part of the game (enemy spawning,
        enemy movement), did video and keyboard input
Kevin:  helped write and debug the bootloader, wrote most of the game's
        underlying logic and supporting files
Daniel: helped write and debug the bootloader, worked on video input, found and
        made sprites for the game, worked on the game (bombs, powerups)



Note that this design document is a bit long.  Most of the questions can be
answered pretty briefly.  Don't feel a need to write a long answer if it is
not required by the question.

			     GAME / DEMO
			     ===========

---- ALGORITHMS ----

>> A1: In 25-30 words or less, what does your PC booter do?

The bootloader loads the DAP to where to the right location in memory. It then
reads sectors in memory and then reads the program in from main memory. We then
enable the VGA mode. We then switch over to protected mode, set up the GDT, etc.,
and then call the C program.

>> A2: In 25-30 words or less, how does the user interact with the program?
>> What are the controls?  What should the user try to do?

The user interacts with the program by using the arrow keys, the z key, and the
shift key. The arrow keys moves the player-character, the z key allows the
characters, and the shift key is the focus mode, which allows the player to
move more precisely. The user tries to survive as long as possible against
never-ending waves of terrifying enemies.

---- DATA STRUCTURES ----

>> A3: Describe any global state that your program manages in order to
>> perform its operations.  Don't focus on state managed within interrupt
>> handlers; we will look at that later.  Rather, focus on state that is
>> part of the game implementation itself.

All of the game state is global, and it is managed in game.c. Other global
state includes the keyboard state and the timer state.

---- SYNCHRONIZATION ----

>> A4: From the perspective of the entire program, briefly describe how
>> the various interrupts are handled and processed within your program.
>> For example, when a timer interrupt occurs, what is the general sequence
>> of operations or updates that is performed within your program?
>> Similarly, when a keyboard interrupt occurs, what does your program do
>> in response?

When a timer interrupt happens, it just updates the tick state of the program
and nothing else. When a keyboard interrupt happens, the keyboard_state
variable, which holds the up and down state of each key on the keyboard.
Each of these are handled in assembly functions which call a C function.

>> A5: Would you say your program relies on polling or busy-waiting anywhere
>> to accomplish its tasks?  If so, what tasks?

The program doesn't have any polling or busy-waiting; the main loop includes a
pause to make it more gentle. When the player of the game loses, we do loop
forever, which freezes the game.

---- RATIONALE ----

>> A6: Why did you choose the project you did?

Because it's really cool and anime grils.

>> A7: Did your choice of project affect any of the specific implementation
>> details of the various subsystems that you needed to use?  (For example,
>> if you implemented a scrolling game, did you implement specialized high-
>> performance video code to scroll the screen?)

For our project, we needed to switch to VGA mode to get better graphics for our
game.

>> A8: Did you run into any technical or resource limitations in the
>> implementation of your program?  (For example, bootloader didn't fit,
>> or a really useful standard library wasn't available, or you couldn't
>> achieve the desired performance level, etc.)  If so, what steps did you
>> take to try to overcome those limitations?

If your computer is slow, you won't be able to run the game fast enough. Doing
mathematical operations was hard without libraries. In particular, the game
could be a lot more fabulous if we could use trigonometric functions. Malloc
would have been very useful. Since we had no file system, we had to make our
own custom content manager.

			     BOOT SECTOR
			     ===========

---- DATA STRUCTURES ----

>> B1: How did you decide to store the Disk Address Packet?  Does the
>> memory occupied by the DAP get reclaimed after it is used?  If not,
>> why not?

We wrote it in right after the boot sector, in a free block of memory.
It does not get reclaimed, since we do not use that memeory ever again.

>> B2: Does your bootloader pass any information to the main program?
>> (If not, just say no.)  If so, what information is passed, and how
>> is it passed?

No.

---- ALGORITHMS ----

>> B3: Briefly describe how your bootloader brings your program into
>> memory.  Does it perform one large load, or multiple smaller loads?

We load the program into memory all at once, via an extended read call using
the interrupt 0x13. 

>> B4: Did you add any BIOS calls to your bootloader to prepare for your
>> main program?  (i.e. things that aren't available in protected mode)

We use the BIOS call int 0x10 to change the video mode to 0x13 to enable VGA.

			  VIDEO SUBSYSTEM
			  ===============

---- DATA STRUCTURES ----

>> C1: What video display mode does your program use?  Is it a text mode
>> or a graphical mode?  Where does the video buffer start?  How is data
>> represented in this mode?  (Please be brief; we don't need complete
>> documentation on the video system.)

We use the VGA video mode. The VGA buffer begins at 0xA0000 and the video
buffer starts at 0xA00000. The structs are directly written into the
video buffer.

>> C2: Does your video code maintain any variables or data structures to
>> facilitate video output?  Briefly describe these values and their
>> purposes here.

The video code doesn't really maintain any variables or data structures besides
useful constants such as color defines and the sizes of different sprites.

---- ALGORITHMS ----

>> C3: What abstraction does your video code present to your main program?
>> Briefly describe the higher-level operations you decided to implement.

The video code holds functions to write into the video buffer, and it exposes
several functions, such as init_video(), which initializes the video state for
the game, and functions to draw different sprites, such as bullets and enemies.
They are written to a temporary frame buffer and then rendered when the program
calls for it.

---- RATIONALE ----

>> C4: Did you take any specific steps to improve the appearance of your
>> program's display output?  For example, using Extended ASCII Codes, or
>> choosing specific colors to represent different things?

We took assets from the internet and souped them up and then put them into
our custom content manager. We also used fonts to render Japanese and Western
characters, which is also included in our content manager.

			  TIMER SUBSYSTEM
			  ===============

---- DATA STRUCTURES ----

>> D1: What state does your timer subsystem manage?  Describe the variables
>> or data structures that it maintains, and how they are used.

The timer subsystem just manages the tick count, which is used for random
number generation (handled in game.c) and for sleeping and updating.

---- ALGORITHMS ----

>> D2: What abstraction does your timer code present to your main program?
>> Briefly describe the higher-level operations you decided to implement.

The timer subsystem only exposes the tick count and a sleep funtion to the rest
of the function. The sleep function uses the halt instruction, which is
efficient and eco-friendly.

>> D3: Did you change the timer frequency from 100Hz?  If so, what did you
>> change it to, and why?

We left it the same because it wa fine-grained enough for our game.

---- SYNCHRONIZATION ----

>> D4: Given how your program handles timer events, is there any potential
>> for timer interrupts to generate race conditions in updating your
>> program's global state?  If so, what steps did you take to ensure that
>> such situations cannot occur?

Race conditions don't happen because the simulation speed is fixed at 30 frames
per second, and the game logic doesn't look at the timer directly. If the
computer is too slow to run the game, the game will run at a reduced frame-rate
as well, similar to many modern games.


			KEYBOARD SUBSYSTEM
			==================

---- DATA STRUCTURES ----

>> E1: What state does your keyboard subsystem manage?  Describe the variables
>> or data structures that it maintains, and how they are used.

Our keyboard subsystem manages a table which describes whether keys are up or
down, which it exposes to the rest of the program.

>> E2: How do your data structures handle keys with multi-byte scan-codes?

No. Our program doesn't need them. However, our code can easily be extended to
handle multi-byte scan codes by holding them in a separate buffer.


---- ALGORITHMS ----

>> E3: What abstraction does your keyboard code present to your main program?
>> Briefly describe the higher-level operations you decided to implement.

It exposes an array with the state of every key in it.

>> E4: Does your keyboard subsystem expose scan-codes directly to your main
>> program, or does it preprocess them and expose other information to your
>> main program?  If scan-code data is preprocessed, briefly describe what
>> information is actually exposed, and how it is derived from scan-codes.

It doesn't; the state of every key is placed in the keyboard array.

---- SYNCHRONIZATION ----

>> E5: Given how your keyboard interrupt handler operates, is there any
>> potential for race conditions in updating the keyboard subsystem's
>> internal state?  If so, what steps did you take to ensure that such
>> situations cannot occur?

No, because additional keyboard interrupts are suspended when handling a
keyboard interrupt, so it cannot be interrupted.

>> E6: Given how your program handles keyboard events, is there any
>> potential for keyboard interrupts to generate race conditions in updating
>> your program's global state?  If so, what steps did you take to ensure
>> that such situations cannot occur?

No, because the keyboard buffer does not interfere with the game state, since
the game state only queries from the keyboard buffer. The game queries the
keyboard buffer every frame to get data as necessary.

---- RATIONALE ----

>> E7: Why did you choose the design and data representation that your
>> keyboard subsystem uses?  How is it suited to your program's overall
>> operation?

Our system is extremely simple and reliable. It is highly suited to real-time
action nature of the game. For an action game, the main game loop can query
the system at every simulation step. Our keyboard subsystem is also very good
as handle multiple simultaneous key presses, which is important for our game.

			  SURVEY QUESTIONS
			  ================

Answering these questions is optional, but it will help us improve the
course in future years.  Feel free to tell us anything you want - these
questions are just to spur your thoughts.  Also, feel free to be completely
honest if there are issues with the assignment or the course - you won't be
penalized.  We can't fix things until we know about them.  :-)

>> In your opinion, was this assignment, or any of the parts of it, too
>> easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Were there any parts of the assignment that you felt were unnecessarily
>> tedious or pointless?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the instructor and/or TAs to more
>> effectively assist students, either for future quarters or the remaining
>> projects?

>> Any other comments?